{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dyllanliu/Desktop/BigLittle/frontend/src/components/Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Form, FormControl, Nav, Navbar, NavDropdown, Card, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"react-router-dom\";\nimport { logout } from \"../actions/userActions\";\nimport { listNotifications, confirmMatch, deleteMatch, listChats, messageMatch } from \"../actions/matchActions\";\nimport { confirmAlert } from 'react-confirm-alert'; // Import\n\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nimport ReactMarkdown from \"react-markdown\";\nimport socketClient from \"socket.io-client\";\nimport { Launcher } from \"../chat_window\";\n\nfunction Header({\n  setSearch\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n\n  const logoutHandler = () => {\n    dispatch(logout());\n  };\n\n  const confirmHandler = match => {\n    dispatch(confirmMatch(match));\n  };\n\n  const deleteHandler = match => {\n    dispatch(deleteMatch(match));\n  };\n\n  const clickMessage = match => {\n    const options = {\n      childrenElement: () => /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 30\n      }, this),\n      customUI: ({\n        onClose\n      }) => /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          margin: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          style: {\n            display: \"flex\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            // onClick={() => ModelShow(note)}\n            style: {\n              color: \"black\",\n              textDecoration: \"none\",\n              flex: 1,\n              cursor: \"pointer\",\n              alignSelf: \"center\",\n              fontSize: 18\n            },\n            children: \"Message From \" + match.mentorId === userInfo._id ? match.user : match.mentor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: /*#__PURE__*/_jsxDEV(\"blockquote\", {\n            className: \"blockquote mb-0\",\n            children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              children: match.mentorId === userInfo._id ? \"Hello \" + match.mentor + \",\\n\\n\" + match.user + \" is interested in being your Little! Here's what they said:\\n\\n\" + \"\\t\" + match.messages[0].text + \"\\n\\n\" + \"Click Confirm to become their Big!\" : \"Hello \" + match.user + \",\\n\\n\" + match.mentor + \" expressed interest in being your big\\n\\n\" + \"They should now appear in your chat box!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n              className: \"blockquote-footer\",\n              children: [\"Sent on\", \" \", /*#__PURE__*/_jsxDEV(\"cite\", {\n                title: \"Source Title\",\n                children: match.mentorId === userInfo._id ? match.createdAt.substring(0, 10) : match.updatedAt.substring(0, 10)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => {\n                    confirmHandler(match);\n                    onClose();\n                  },\n                  children: \"Confirm\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"danger\",\n                  className: \"mx-2\",\n                  onClick: () => {\n                    deleteHandler(match);\n                    onClose();\n                  },\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, match._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this),\n      willUnmount: () => {}\n    };\n    confirmAlert(options);\n  };\n\n  const chatList = useSelector(state => state.chatList);\n  const {\n    cLoading,\n    cError,\n    chats\n  } = chatList;\n\n  const chatsCount = () => {\n    if (!cError && chats) {\n      return chats.length;\n    } else if (cLoading) {\n      return \"loading..\";\n    } else {\n      return 0;\n    }\n  };\n\n  const matchConfirm = useSelector(state => state.matchConfirm);\n  const {\n    conLoading,\n    conError,\n    confirmedMatch\n  } = matchConfirm;\n  const notificationsList = useSelector(state => state.notificationsList);\n  const {\n    loading,\n    error,\n    notifications\n  } = notificationsList;\n\n  const notificationsCount = () => {\n    if (!error && notifications) {\n      if (notifications.length !== currNotificationsCount) {\n        setCurrNotificationsCount(notifications.length);\n      }\n\n      return notifications.length;\n    }\n\n    return currNotificationsCount;\n  };\n\n  const updateChat = async () => {\n    await dispatch(listChats());\n  };\n\n  const [currNotificationsCount, setCurrNotificationsCount] = useState(notifications ? notifications.length : 0);\n\n  const updateNotifications = async () => {\n    await dispatch(listNotifications());\n    setTimeout(updateNotifications, 30 * 1000);\n  }; // const SERVER = \"https://biglittle.herokuapp.com\";\n  // const SERVER = \"127.0.0.1:443\";\n  // const [socket, setSocket] = useState(socketClient(SERVER));\n\n\n  const [channel, setChannel] = useState({});\n  const [channels, setChannels] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleChat = () => {\n    if (!isOpen) {\n      updateChat();\n    }\n\n    setIsOpen(!isOpen);\n  };\n\n  const configureSocket = () => {// socket.removeAllListeners();\n    // if (userInfo) {\n    //   socket.on('connection', () => {\n    //       socket.emit('register', userInfo._id);\n    //   });\n    //   channels.forEach(c => {\n    //     socket.on('message' + c.id, message => {\n    //       if (channel.id === c.id) {\n    //         updateChannel(message);\n    //       }\n    //     });\n    //   });\n    // }\n  };\n\n  const handleSendMessage = message => {\n    message.id = userInfo._id + Date.now();\n    updateChannel(message);\n    message = {\n      to: channel.id,\n      type: message.type,\n      data: message.data,\n      id: message.id\n    };\n    dispatch(messageMatch(channel.match, message));\n    socket.emit('send-message', message);\n  };\n\n  const loadChannels = () => {\n    if (chats) {\n      setChannels(chats.map(match => ({\n        match,\n        id: userInfo._id === match.mentorId ? match.userId : match.mentorId,\n        name: userInfo._id === match.mentorId ? match.user : match.mentor,\n        pic: userInfo._id === match.mentorId ? match.userPic : match.mentorPic,\n        messages: match.messages.map(message => ({\n          author: message.id.substring(0, 24) === userInfo._id ? \"me\" : \"them\",\n          type: message.type,\n          data: message.data,\n          id: message.id\n        })),\n        confirmed: match.confirmed\n      })));\n    }\n  };\n\n  const updateChannel = message => {\n    message.author = message.id.substring(0, 24) === userInfo._id ? \"me\" : \"them\";\n\n    if (!channel.messages) {\n      channel.messages = [message];\n    } else {\n      channel.messages.push(message);\n    }\n\n    setChannel(channel => ({ ...channel\n    }));\n  };\n\n  useEffect(() => {\n    updateNotifications(); // updateChat()\n  }, [userInfo, confirmedMatch]);\n  useEffect(() => {// loadChannels()\n  }, [chats]);\n  useEffect(() => {// if (channel.id && confirmedMatch && confirmedMatch.userId === channel.id) {\n    //   setIsOpen(true);\n    // }\n  }, [channel]);\n  useEffect(() => {// configureSocket()\n    // if (channels.length > 0) {\n    //   setChannel(channels[0]);\n    // }\n  }, [channels]);\n  return /*#__PURE__*/_jsxDEV(Navbar, {\n    collapseOnSelect: true,\n    expand: \"lg\",\n    bg: \"primary\",\n    variant: \"dark\",\n    children: [/*#__PURE__*/_jsxDEV(Launcher, {\n      style: {\n        zIndex: \"20\"\n      },\n      agentProfile: {\n        teamName: channel.name,\n        imageUrl: channel.pic\n      },\n      isOpen: isOpen,\n      handleClick: toggleChat,\n      onMessageWasSent: handleSendMessage,\n      messageList: channel.messages ? channel.messages : []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n        href: \"/home\",\n        children: \"BigLittle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navbar.Toggle, {\n        \"aria-controls\": \"responsive-navbar-nav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navbar.Collapse, {\n        id: \"responsive-navbar-nav\",\n        children: [/*#__PURE__*/_jsxDEV(Nav, {\n          className: \"m-auto\",\n          children: userInfo && /*#__PURE__*/_jsxDEV(Form, {\n            inline: true,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              type: \"text\",\n              placeholder: \"Search\",\n              className: \"mr-sm-2\",\n              style: {\n                width: \"320px\"\n              },\n              onChange: e => setSearch(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Nav, {\n          children: userInfo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Nav.Link, {\n              href: \"/myposts\",\n              children: \"My Pro\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown, {\n              title: \"Chat\",\n              id: \"collasible-nav-dropdown\",\n              onClick: updateChat,\n              children: !cError && !cLoading && channels && channels.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                  onClick: () => {\n                    setChannel(c);\n                    setIsOpen(true);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      src: c.pic,\n                      alt: \"\",\n                      className: \"circularProfilePic\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 293,\n                      columnNumber: 27\n                    }, this), \" \" + c.name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown, {\n              title: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Notification\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"badge badge-pill badge-dark small font-weight-light ml-1\",\n                  title: \"Unread\",\n                  children: notificationsCount()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 21\n              }, this),\n              id: \"collasible-nav-dropdown\",\n              alignRight: true,\n              onClick: updateNotifications,\n              children: notifications && notifications.map(match => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                  onClick: () => clickMessage(match),\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      src: match.mentorId === userInfo._id ? match.userPic : match.mentorPic,\n                      alt: \"\",\n                      className: \"circularProfilePic\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 322,\n                      columnNumber: 27\n                    }, this), match.mentorId === userInfo._id ? \" \" + match.user + \" wants to become your little!\" : \" \" + match.mentor + \" expressed ineterest in being your big!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 327,\n                      columnNumber: 27\n                    }, this), \"Click to view this message...\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown, {\n              title: `${userInfo.name}`,\n              id: \"collasible-nav-dropdown\",\n              alignRight: true,\n              children: [/*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                href: \"/profile\",\n                children: \"My Profile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Divider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                href: \"/\",\n                onClick: logoutHandler,\n                children: \"Logout\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Nav.Link, {\n            href: \"/login\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Header, \"uYAI4uyHUAjEwcGpfnCwRFyvtVg=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/dyllanliu/Desktop/BigLittle/frontend/src/components/Header.js"],"names":["React","useState","useEffect","Container","Form","FormControl","Nav","Navbar","NavDropdown","Card","Button","useDispatch","useSelector","logout","listNotifications","confirmMatch","deleteMatch","listChats","messageMatch","confirmAlert","ReactMarkdown","socketClient","Launcher","Header","setSearch","dispatch","userLogin","state","userInfo","logoutHandler","confirmHandler","match","deleteHandler","clickMessage","options","childrenElement","customUI","onClose","margin","display","color","textDecoration","flex","cursor","alignSelf","fontSize","mentorId","_id","user","mentor","messages","text","createdAt","substring","updatedAt","willUnmount","chatList","cLoading","cError","chats","chatsCount","length","matchConfirm","conLoading","conError","confirmedMatch","notificationsList","loading","error","notifications","notificationsCount","currNotificationsCount","setCurrNotificationsCount","updateChat","updateNotifications","setTimeout","channel","setChannel","channels","setChannels","isOpen","setIsOpen","toggleChat","configureSocket","handleSendMessage","message","id","Date","now","updateChannel","to","type","data","socket","emit","loadChannels","map","userId","name","pic","userPic","mentorPic","author","confirmed","push","zIndex","teamName","imageUrl","width","e","target","value","c"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from \"react\";\nimport {\n  Container,\n  Form,\n  FormControl,\n  Nav,\n  Navbar,\n  NavDropdown,\n  Card, \n  Button\n} from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {} from \"react-router-dom\";\nimport { logout } from \"../actions/userActions\";\nimport { listNotifications, confirmMatch, deleteMatch, listChats, messageMatch } from \"../actions/matchActions\";\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport ReactMarkdown from \"react-markdown\";\nimport socketClient from \"socket.io-client\";\nimport { Launcher } from \"../chat_window\"\n\nfunction Header({ setSearch }) {\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const logoutHandler = () => {\n    dispatch(logout());\n  };\n\n  const confirmHandler = (match) => {\n    dispatch(confirmMatch(match));\n  };\n\n  const deleteHandler = (match) => {\n    dispatch(deleteMatch(match));\n  };\n\n  const clickMessage = (match) => {\n    const options = {\n      childrenElement: () => <div />,\n      customUI: ({ onClose }) => (\n        <Card style={{ margin: 10 }} key={match._id}>\n          <Card.Header style={{ display: \"flex\" }}>\n            <span\n              // onClick={() => ModelShow(note)}\n              style={{\n                color: \"black\",\n                textDecoration: \"none\",\n                flex: 1,\n                cursor: \"pointer\",\n                alignSelf: \"center\",\n                fontSize: 18,\n              }}\n            >\n              { \"Message From \" + match.mentorId === userInfo._id ? match.user : match.mentor}\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <ReactMarkdown>\n                {\n                  match.mentorId === userInfo._id \n                    ? \"Hello \" + match.mentor + \",\\n\\n\" + \n                    match.user + \" is interested in being your Little! Here's what they said:\\n\\n\" + \n                    \"\\t\" + match.messages[0].text + \"\\n\\n\" + \n                    \"Click Confirm to become their Big!\"\n                    : \"Hello \" + match.user + \",\\n\\n\" + \n                    match.mentor + \" expressed interest in being your big\\n\\n\" + \n                    \"They should now appear in your chat box!\"\n                }\n              </ReactMarkdown>\n              <footer className=\"blockquote-footer\">\n                Sent on{\" \"}\n                <cite title=\"Source Title\">\n                  {match.mentorId === userInfo._id ? match.createdAt.substring(0, 10) : match.updatedAt.substring(0, 10)}\n                </cite>\n                <div>\n                  <Button \n                    onClick={() => {\n                      confirmHandler(match); \n                      onClose();\n                    }}\n                  >\n                    Confirm\n                  </Button>\n                  <Button\n                    variant=\"danger\"\n                    className=\"mx-2\"\n                    onClick={() => {\n                      deleteHandler(match);\n                      onClose();\n                    }}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              </footer>\n            </blockquote>\n          </Card.Body>\n        </Card>\n      ),\n      willUnmount: () => {}\n    }\n  \n    confirmAlert(options)\n  }\n\n  const chatList = useSelector((state) => state.chatList);\n  const { cLoading, cError, chats } = chatList;\n\n  const chatsCount = () => {\n    if (!cError && chats) {\n      return chats.length;\n    } else if (cLoading) {\n      return \"loading..\";\n    } else {\n      return 0;\n    }\n  } \n\n  const matchConfirm = useSelector((state) => state.matchConfirm);\n  const { conLoading, conError, confirmedMatch } = matchConfirm;\n\n  const notificationsList = useSelector((state) => state.notificationsList);\n  const { loading, error, notifications } = notificationsList;\n\n  const notificationsCount = () => {\n    if (!error && notifications) {\n      if (notifications.length !== currNotificationsCount) {\n        setCurrNotificationsCount(notifications.length);\n      }\n      return notifications.length;\n    }\n    return currNotificationsCount;\n  } \n\n  const updateChat = async () => {\n    await dispatch(listChats());\n  };\n\n  const [currNotificationsCount, setCurrNotificationsCount] = useState(notifications ? notifications.length : 0);\n\n  const updateNotifications = async () => {\n    await dispatch(listNotifications());\n    setTimeout(updateNotifications, 30 * 1000);\n  };\n\n  // const SERVER = \"https://biglittle.herokuapp.com\";\n    // const SERVER = \"127.0.0.1:443\";\n    \n  // const [socket, setSocket] = useState(socketClient(SERVER));\n  const [channel, setChannel] = useState({});\n  const [channels, setChannels] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleChat = () => {\n    if (!isOpen) {\n      updateChat();\n    }\n    setIsOpen(!isOpen);\n  };\n\n  const configureSocket = () => {\n    // socket.removeAllListeners();\n    // if (userInfo) {\n    //   socket.on('connection', () => {\n    //       socket.emit('register', userInfo._id);\n    //   });\n\n    //   channels.forEach(c => {\n    //     socket.on('message' + c.id, message => {\n    //       if (channel.id === c.id) {\n    //         updateChannel(message);\n    //       }\n    //     });\n    //   });\n    // }\n  }\n\n  const handleSendMessage = (message) => {\n      message.id = userInfo._id + Date.now();\n      updateChannel(message);\n      message = { to: channel.id, type: message.type, data: message.data, id: message.id };\n      dispatch(messageMatch(channel.match, message));\n      socket.emit('send-message', message);\n  }\n\n  const loadChannels = () => {\n      if (chats) {\n          setChannels(chats.map((match) => ({ \n              match,\n              id: userInfo._id === match.mentorId ? match.userId : match.mentorId,\n              name: userInfo._id === match.mentorId ? match.user : match.mentor,\n              pic: userInfo._id === match.mentorId ? match.userPic : match.mentorPic,\n              messages: match.messages.map((message) => ({\n                  author: message.id.substring(0, 24) === userInfo._id ? \"me\" : \"them\", \n                  type: message.type,\n                  data: message.data,\n                  id: message.id\n              })),\n              confirmed: match.confirmed\n          })));\n      }\n  }\n\n  const updateChannel = (message) => {\n      message.author = message.id.substring(0, 24) === userInfo._id ? \"me\" : \"them\";\n      if (!channel.messages) {\n          channel.messages = [message];\n      } else {\n          channel.messages.push(message);\n      }\n      setChannel(channel=> ({...channel}));\n  }\n  \n  useEffect(() => {\n    updateNotifications()\n    // updateChat()\n  }, \n  [userInfo, confirmedMatch]);\n\n  useEffect(() => {\n      // loadChannels()\n  }, \n  [chats]);\n\n  useEffect(() => {\n    // if (channel.id && confirmedMatch && confirmedMatch.userId === channel.id) {\n    //   setIsOpen(true);\n    // }\n  }, \n  [channel]);\n\n  useEffect(() => {\n    // configureSocket()\n    // if (channels.length > 0) {\n    //   setChannel(channels[0]);\n    // }\n  }, \n  [channels]);\n\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n      <Launcher \n          style={{zIndex:\"20\"}}\n          agentProfile={{\n              teamName: channel.name,\n              imageUrl: channel.pic\n          }}\n          isOpen={isOpen}\n          handleClick={toggleChat}\n          onMessageWasSent={handleSendMessage}\n          messageList={channel.messages ? channel.messages : []} \n      />\n      <Container fluid>\n        <Navbar.Brand href=\"/home\">BigLittle</Navbar.Brand>\n\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"m-auto\">\n            {userInfo && (\n              <Form inline>\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  className=\"mr-sm-2\"\n                  style={{width: \"320px\"}}\n                  onChange={(e) => setSearch(e.target.value)}\n                />\n              </Form>\n            )}\n          </Nav>\n          <Nav>\n            {userInfo ? (\n              <>\n                <Nav.Link href=\"/myposts\">My Pro</Nav.Link>\n                <NavDropdown\n                  title={\"Chat\"}\n                  id=\"collasible-nav-dropdown\"\n                  onClick={updateChat}\n                >\n                  {!cError && !cLoading && channels && \n                  channels\n                  .map((c) => (\n                    <div>\n                      <NavDropdown.Item onClick={() => {\n                        setChannel(c);\n                        setIsOpen(true);\n                      }}>\n                        <div>\n                          <img src={c.pic} alt={\"\"} className=\"circularProfilePic\" />\n                          {\" \" + c.name}\n                        </div>\n                      </NavDropdown.Item>\n                    </div>\n                  ))}\n                </NavDropdown>\n                <NavDropdown\n                  title={\n                    <div>\n                      Notification\n                      <span\n                        className=\"badge badge-pill badge-dark small font-weight-light ml-1\"\n                        title=\"Unread\"\n                      >\n                        {notificationsCount()}\n                      </span>\n                    </div>\n                  }\n                  id=\"collasible-nav-dropdown\"\n                  alignRight={true}\n                  onClick={updateNotifications}\n                > \n                  {notifications && \n                  notifications\n                  .map((match) => (\n                    <div>\n                      <NavDropdown.Item onClick={() => clickMessage(match)}>\n                        <div>\n                          <img src={match.mentorId === userInfo._id ? match.userPic : match.mentorPic} alt={\"\"} className=\"circularProfilePic\" />\n                          {match.mentorId === userInfo._id \n                            ? \" \" + match.user + \" wants to become your little!\"\n                            : \" \" + match.mentor + \" expressed ineterest in being your big!\"\n                          }\n                          <br></br>\n                          Click to view this message...\n                        </div>\n                      </NavDropdown.Item>\n                    </div>\n                  ))}\n                </NavDropdown>\n                <NavDropdown\n                  title={`${userInfo.name}`}\n                  id=\"collasible-nav-dropdown\"\n                  alignRight={true}\n                >\n                  <NavDropdown.Item href=\"/profile\">\n                    {/* <img\n                      alt=\"\"\n                      src={`${userInfo.pic}`}\n                      width=\"25\"\n                      height=\"25\"\n                      style={{ marginRight: 10 }}\n                    /> */}\n                    My Profile\n                  </NavDropdown.Item>\n                  <NavDropdown.Divider />\n                  <NavDropdown.Item href=\"/\" onClick={logoutHandler}>\n                    Logout\n                  </NavDropdown.Item>\n                </NavDropdown>\n              </>\n            ) : (\n              <Nav.Link href=\"/login\">Login</Nav.Link>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}